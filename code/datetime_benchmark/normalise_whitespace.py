# -*- coding: utf-8 -*-

"""
normalise_whitespace.py: normalise the whitespace of datetime string to a specifc character, e.g single space

objective is to reduce the dimensionality of the space of datetime representations

e.g 29 May  2021, 7:23:11 PM -> 29 May 2021 7:23:11

operations:
- remove duplicate spaces
- replace commas with single space
- strip trailing whitespcae
- cast to lower case

edward | 2021-06-03 | Initial version
edward | 2022-02-14 | , delimiter should not be replaced because it could be a valid part of a string, e.g a number!!
edward | 2022-02-14 | TAB delimiter added

BACKLOG
- can the replacement algorithm not be pre-compiled?
"""

# system
from datetime import date, datetime, time, timedelta
from typing import List, Set, Dict, Tuple, Optional, Union, Iterable

class NormaliseWhitespace:

    # training configuration
    def __init__(self):

        """
        :param debug: debugging
        """

        self.normalisation_character = " "

        
        # BACKLOG: add more of non-trivial whitespaces
        self.whitespace_to_be_replaced = [
                # edward | 2022-02-14 | , delimiter should not be replaced because it could be a valid part of a string, e.g a number!!
                # edward | 2022-02-14 | TAB delimiter added
                #","
                "\t"
                , "  "
                , "   "
                , "\xc2\xa0" # Non-breaking space
                , "\xa0" # \xa0 is a non-breaking space in Latin1 (ISO 8859-1), generated by Babel
                , "\u202f" # Babel generates \u202f which is a narrow or thin space (# https://www.fileformat.info/info/unicode/char/202f/index.htm)

                # NOTE: the following characters do not get flattened to ascii 
                , "\x0b"
                , "\x0c"

                # NO-BREAK SPACE
                # https://www.fileformat.info/info/unicode/char/00a0/index.htm
                , "\u00a0"
                            
                ]

    
    def normalise(self, date_str : str) -> str:
        
        """
        normalise the whitespace in date_str

        :param date_str: a date/datetime like string, e.g 29 May  2021, 7:23:11 PM

        :return: normalised date/datetime

        """

        # argument checks
        assert isinstance(date_str, str)

        for chars in self.whitespace_to_be_replaced:
            date_str = date_str.replace(chars, self.normalisation_character)

        # normalise whitespace does not mean transform to lower case... probably a breaking change, sorry
        # edward | 2021-09-15
        #return date_str.strip().lower()
        return date_str.strip()

   
